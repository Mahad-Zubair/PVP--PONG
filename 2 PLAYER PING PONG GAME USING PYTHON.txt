import pygame 

pygame.init()
WIDTH, HEIGHT = 700,500
win = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption("PONG")
FPS = 0
WHITE = (255,255,255)
radius = 7
Paddle_Width,Paddle_Height = 20,100
Win_score = 10
score_font = pygame.font.SysFont("comicsans",50)
#-----------------------------------------------------------------------#
class Paddle:
    COLOR = (255,255,255)
    Vel = 2 ## to move the paddles i.e., how much paddles move when user hits the button
    def __init__(self,x,y,width,height):
        self.x = self.original_x = x
        self.y = self.original_y = y
        self.width = width
        self.height = height
    def draw(self,win): ##to draw the paddles
         pygame.draw.rect(win,self.COLOR, (self.x,self.y,self.width,self.height))
    
    def move(self, up= True):
        if up:
            self.y -= self.Vel ## as we move the Paddle up we have to subtract the Vel from y coordinate
        else:
            self.y += self.Vel ## to go down 
    def reset(self):## resets the ball back on the screen after a score
      self.x = self.original_x
      self.y = self.original_y
        

#-----------------------------------------------------------------------#
def draw(win,paddles,ball,left_score,right_score): ##to draw stuff on the screen/board
    win.fill((0,0,0))##to change background color
    
    left_text = score_font.render(f"{left_score}",1,WHITE)
    right_text = score_font.render(f"{right_score}",1,WHITE)
    win.blit(left_text,(WIDTH //4 - left_text.get_width()//2 ,20))
    win.blit(right_text,(WIDTH * (3/4) - right_text.get_width()//2 ,20))
    ##pygame.display.update() ##update the display and perform all the drawing operations
    for Paddle in paddles:
        Paddle.draw(win)
        
    for i in range(10,HEIGHT,HEIGHT//10):## to draw a dotted line in center of the screen
        if i  %  2 == 1: 
            continue
        pygame.draw.rect(win,WHITE,(WIDTH//2 - 5, i, 10,HEIGHT//15))
    ball.draw(win) 
    pygame.display.update()
#-----------------------------------------------------------------------#
class Ball:
  MAX_VEL = 2
  Color = WHITE
  def __init__(self,x,y,radius):
      self.x = self.original_x = x
      self.y = self.original_y = y
      self.radius = radius
      self.x_vel = self.MAX_VEL ## speed of ball 
      self.y_vel = 0  ## would go to the right first
  def draw(self,win):
      pygame.draw.circle(win,self.Color,(self.x,self.y), self.radius )
  def move(self): ## to move the ball
      self.x += self.x_vel
      self.y += self.y_vel
  def reset(self):## resets the ball back on the screen after a score
      self.x = self.original_x
      self.y = self.original_y
      self.y_vel = 0
      self.x_vel *= -1
#-----------------------------------------------------------------------#
def handle_collision(ball,left_paddle,right_paddle):
    if ball.y + ball.radius >= HEIGHT: ## handles collision with the ceiling
        ball.y_vel *= -1 ## reverses the direction
        ## checking up not down
    elif ball.y - ball.radius <=0:## handles collision with the ceiling
        ball.y_vel *= -1
        
    ## to check which Paddle is being hit by the ball
    if ball.x_vel < 0:
        if ball.y >= left_paddle.y and ball.y <= left_paddle.y + left_paddle.height:
            if ball.x - ball.radius <= left_paddle.x + left_paddle.width:    
                ball.x_vel *= -1 ## handling collision for left paddle
                middle_y = left_paddle.y + left_paddle.height /2
                difference_y = middle_y - ball.y
                reduction_factor = (left_paddle.height / 2) / ball.MAX_VEL
                y_vel = difference_y / reduction_factor
                ball.y_vel = -1 * y_vel
    else:
        if ball.y >= right_paddle.y and ball.y <= right_paddle.y + right_paddle.height:
            if ball.x + ball.radius >= right_paddle.x:
                ball.x_vel *= -1
                
                middle_y = right_paddle.y + right_paddle.height /2
                difference_y = middle_y - ball.y
                reduction_factor = (right_paddle.height / 2) / ball.MAX_VEL
                y_vel = difference_y / reduction_factor
                ball.y_vel = 1* y_vel
#-----------------------------------------------------------------------#
def paddle_movement(keys,left_paddle,right_paddle):
    ## here 0 represents the top point of the screen
    if keys[pygame.K_w] and left_paddle.y - left_paddle.Vel >=0: ##shows if w key is pressed
        left_paddle.move(up=True)
## y is the top-left corner, we add height so that we get the bottom of the board and not get out of the screen
    if keys[pygame.K_s] and left_paddle.y + left_paddle.Vel + left_paddle.height <= HEIGHT:
        left_paddle.move(up= False)
##for letter keys always small letters, if shift or enter type keys capital letters  
    if keys[pygame.K_UP] and right_paddle.y - right_paddle.Vel >=0:
        right_paddle.move(up=True)
    if keys[pygame.K_DOWN] and right_paddle.y + right_paddle.Vel + right_paddle.height <= HEIGHT:
        right_paddle.move(up= False)
#-----------------------------------------------------------------------#
def maindisplay(): ##to show the display and handle all the events going to occur
    run = True
    ##a clock regulates framework, ensuring it runs equally on all platforms
    clock = pygame.time.Clock()
    left_paddle = Paddle(10,HEIGHT//2 - Paddle_Height//2,Paddle_Width,Paddle_Height)
    right_paddle = Paddle(WIDTH -10 - Paddle_Width,HEIGHT//2 - Paddle_Height//2,Paddle_Width,Paddle_Height)
    ##using integer division as we cannot draw over a floating value point
    ball = Ball(WIDTH // 2, HEIGHT // 2, radius)
    ##Implementing the Score
    left_score = 0
    right_score = 0
    ## this loop is going to be constantly running and handles all things related to our game
    while run: 
        clock.tick(FPS)
        for event in pygame.event.get():## this will get all events like clicking mouse, keyboard, closing the window
            if event.type == pygame.QUIT:
                run = False
                break
        ##will give us the list of all the different keys that have been pressed
        keys = pygame.key.get_pressed()
        paddle_movement(keys, left_paddle,right_paddle)
        ball.move() 
        handle_collision(ball,left_paddle,right_paddle)
        
        if ball.x <0:
            right_score +=1
            ball.reset()
        elif ball.x > WIDTH:
            left_score +=1
            ball.reset()
        
        won = False 
        if left_score >= Win_score:
           won = True
           win_test = " LEFT PLAYER WON"
        elif right_score >= Win_score:
           won = True
           win_test = " RIGHT PLAYER WON"
        
        if won:
            text = score_font.render(win_test, 1, WHITE)
            win.blit(text,(WIDTH//2 - text.get_width()//2, HEIGHT //2 - text.get_height()//2))
            pygame.display.update()
            pygame.time.delay(5000)
            ball.reset()
            left_paddle.reset()
            right_paddle.reset()
            left_score = 0
            right_score = 0
        draw(win,[left_paddle,right_paddle],ball,left_score,right_score)
    pygame.quit()     
        
if __name__ == '__main__':
     maindisplay()
     